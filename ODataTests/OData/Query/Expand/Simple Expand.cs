// <auto-generated>
//     This code was generated by a tool from a template stored in:
//     '..\odatasdkcodesamples\ODataValidationToolkit\4.0\ODataTestGen\TestTemplates\Query\Expand\Simple Expand.tt'
//     Generation time: 12/08/2010 16:12:38
// </auto-generated>
	





namespace ODataGeneratedTests
{
    	
    using System;
    using System.Linq;
    using System.IO;
    using System.Data.Services;
    using System.Xml.Linq;
    using System.Net;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    using System.Text;
    using AtomPayloadAnalyzer;
    using System.Xml;
    
    [TestClass]
    public class ExpandAllNavigationProperties
    {
        			
        /// <summary>
        /// Expand navigation property Products of Categories
        /// </summary>
        [TestMethod]
        public void ExpandProductsFromCategories()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Categories?$expand=Products";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Customer of CustomerCustomerDemos
        /// </summary>
        [TestMethod]
        public void ExpandCustomerFromCustomerCustomerDemos()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos?$expand=Customer";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property CustomerDemographics of CustomerCustomerDemos
        /// </summary>
        [TestMethod]
        public void ExpandCustomerDemographicsFromCustomerCustomerDemos()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos?$expand=CustomerDemographics";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property CustomerCustomerDemos of CustomerDemographics
        /// </summary>
        [TestMethod]
        public void ExpandCustomerCustomerDemosFromCustomerDemographics()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerDemographics?$expand=CustomerCustomerDemos";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property CustomerCustomerDemos of Customers
        /// </summary>
        [TestMethod]
        public void ExpandCustomerCustomerDemosFromCustomers()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers?$expand=CustomerCustomerDemos";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Orders of Customers
        /// </summary>
        [TestMethod]
        public void ExpandOrdersFromCustomers()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers?$expand=Orders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property ReportsToEmployee of Employees
        /// </summary>
        [TestMethod]
        public void ExpandReportsToEmployeeFromEmployees()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees?$expand=ReportsToEmployee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property EmployeeTerritories of Employees
        /// </summary>
        [TestMethod]
        public void ExpandEmployeeTerritoriesFromEmployees()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees?$expand=EmployeeTerritories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Orders of Employees
        /// </summary>
        [TestMethod]
        public void ExpandOrdersFromEmployees()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees?$expand=Orders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property ReportsToChildren of Employees
        /// </summary>
        [TestMethod]
        public void ExpandReportsToChildrenFromEmployees()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees?$expand=ReportsToChildren";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Employee of EmployeeTerritories
        /// </summary>
        [TestMethod]
        public void ExpandEmployeeFromEmployeeTerritories()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories?$expand=Employee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Territory of EmployeeTerritories
        /// </summary>
        [TestMethod]
        public void ExpandTerritoryFromEmployeeTerritories()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories?$expand=Territory";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Order of OrderDetails
        /// </summary>
        [TestMethod]
        public void ExpandOrderFromOrderDetails()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails?$expand=Order";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Product of OrderDetails
        /// </summary>
        [TestMethod]
        public void ExpandProductFromOrderDetails()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails?$expand=Product";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Customer of Orders
        /// </summary>
        [TestMethod]
        public void ExpandCustomerFromOrders()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders?$expand=Customer";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Employee of Orders
        /// </summary>
        [TestMethod]
        public void ExpandEmployeeFromOrders()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders?$expand=Employee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property OrderDetails of Orders
        /// </summary>
        [TestMethod]
        public void ExpandOrderDetailsFromOrders()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders?$expand=OrderDetails";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property ShipViaShipper of Orders
        /// </summary>
        [TestMethod]
        public void ExpandShipViaShipperFromOrders()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders?$expand=ShipViaShipper";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property OrderDetails of Products
        /// </summary>
        [TestMethod]
        public void ExpandOrderDetailsFromProducts()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Products?$expand=OrderDetails";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Territories of Regions
        /// </summary>
        [TestMethod]
        public void ExpandTerritoriesFromRegions()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Regions?$expand=Territories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property ShipViaOrders of Shippers
        /// </summary>
        [TestMethod]
        public void ExpandShipViaOrdersFromShippers()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Shippers?$expand=ShipViaOrders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Products of Suppliers
        /// </summary>
        [TestMethod]
        public void ExpandProductsFromSuppliers()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Suppliers?$expand=Products";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property Region of Territories
        /// </summary>
        [TestMethod]
        public void ExpandRegionFromTerritories()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories?$expand=Region";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        			
        /// <summary>
        /// Expand navigation property EmployeeTerritories of Territories
        /// </summary>
        [TestMethod]
        public void ExpandEmployeeTerritoriesFromTerritories()			
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories?$expand=EmployeeTerritories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


    }
}
