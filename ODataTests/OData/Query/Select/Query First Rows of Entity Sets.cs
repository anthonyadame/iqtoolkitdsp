// <auto-generated>
//     This code was generated by a tool from a template stored in:
//     '..\odatasdkcodesamples\ODataValidationToolkit\4.0\ODataTestGen\TestTemplates\Query\Select\Query First Rows of Entity Sets.tt'
//     Generation time: 12/08/2010 16:12:47
// </auto-generated>
	





namespace ODataGeneratedTests
{
    	
    using System;
    using System.Linq;
    using System.IO;
    using System.Data.Services;
    using System.Xml.Linq;
    using System.Net;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    using System.Text;
    using AtomPayloadAnalyzer;
    using System.Xml;
    
    [TestClass]
    public class QueryFirstEntry
    {
        
        /// <summary>
        /// Query the first entry from Categories
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromCategories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Categories(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from CustomerCustomerDemos
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromCustomerCustomerDemos()
        {
            // TestGenerator cannot get the path for first entry since query option '?$top=1' doesn't return any entry. It might be caused by:
            // 1. The entity set is not readable or it does not support top query.
            // 2. It is a blank entity set with no entry.
            // Please specify a particular entry key.
            
            throw new InvalidOperationException("Test Generator cannot find the key of first entry");
            // Please specify a valid key, remove the exception and uncomment the validation codes.
            /*
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos(Failed to get entry key)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
            */
        }


        /// <summary>
        /// Query the first entry from CustomerDemographics
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromCustomerDemographics()
        {
            // TestGenerator cannot get the path for first entry since query option '?$top=1' doesn't return any entry. It might be caused by:
            // 1. The entity set is not readable or it does not support top query.
            // 2. It is a blank entity set with no entry.
            // Please specify a particular entry key.
            
            throw new InvalidOperationException("Test Generator cannot find the key of first entry");
            // Please specify a valid key, remove the exception and uncomment the validation codes.
            /*
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerDemographics(Failed to get entry key)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
            */
        }


        /// <summary>
        /// Query the first entry from Customers
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromCustomers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers('ALFKI')";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Employees
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from EmployeeTerritories
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromEmployeeTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories(EmployeeID=1,TerritoryID='06897')";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from OrderDetails
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromOrderDetails()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails(OrderID=10248,ProductID=11)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Orders
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders(10248)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Products
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromProducts()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Products(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Regions
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromRegions()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Regions(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Shippers
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromShippers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Shippers(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Suppliers
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromSuppliers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Suppliers(1)";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Query the first entry from Territories
        /// </summary>
        [TestMethod]
        public void QueryFirstEntryFromTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories('01581')";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


    }
}
