// <auto-generated>
//     This code was generated by a tool from a template stored in:
//     '..\odatasdkcodesamples\ODataValidationToolkit\4.0\ODataTestGen\TestTemplates\Query\Select\Query All Navigation Properties.tt'
//     Generation time: 12/08/2010 16:12:44
// </auto-generated>
	





namespace ODataGeneratedTests
{
    	
    using System;
    using System.Linq;
    using System.IO;
    using System.Data.Services;
    using System.Xml.Linq;
    using System.Net;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    using System.Text;
    using AtomPayloadAnalyzer;
    using System.Xml;
    
    [TestClass]
    public class QueryAllNavigationProperties
    {
        
        /// <summary>
        /// Select navigation property Products From Categories
        /// </summary>			
        [TestMethod]
        public void SelectProductsFromCategories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Categories(1)/Products";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Customer From CustomerCustomerDemos
        /// </summary>			
        [TestMethod]
        public void SelectCustomerFromCustomerCustomerDemos()
        {
            // TestGenerator cannot get the path for first entry since query option '?$top=1' doesn't return any entry. It might be caused by:
            // 1. The entity set is not readable or it does not support top query.
            // 2. It is a blank entity set with no entry.
            // Please specify a particular entry key.
            
            throw new InvalidOperationException("Test Generator cannot find the key of first entry");
            // Please specify a valid key, remove the exception and uncomment the validation codes.
            /*
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos(Failed to get entry key)/Customer";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
            */
        }


        /// <summary>
        /// Select navigation property CustomerDemographics From CustomerCustomerDemos
        /// </summary>			
        [TestMethod]
        public void SelectCustomerDemographicsFromCustomerCustomerDemos()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos(Failed to get entry key)/CustomerDemographics";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
            
        }


        /// <summary>
        /// Select navigation property CustomerCustomerDemos From CustomerDemographics
        /// </summary>			
        [TestMethod]
        public void SelectCustomerCustomerDemosFromCustomerDemographics()
        {
            // TestGenerator cannot get the path for first entry since query option '?$top=1' doesn't return any entry. It might be caused by:
            // 1. The entity set is not readable or it does not support top query.
            // 2. It is a blank entity set with no entry.
            // Please specify a particular entry key.
            
            throw new InvalidOperationException("Test Generator cannot find the key of first entry");
            // Please specify a valid key, remove the exception and uncomment the validation codes.
            /*
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerDemographics(Failed to get entry key)/CustomerCustomerDemos";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
            */
        }


        /// <summary>
        /// Select navigation property CustomerCustomerDemos From Customers
        /// </summary>			
        [TestMethod]
        public void SelectCustomerCustomerDemosFromCustomers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers('ALFKI')/CustomerCustomerDemos";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Orders From Customers
        /// </summary>			
        [TestMethod]
        public void SelectOrdersFromCustomers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers('ALFKI')/Orders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property ReportsToEmployee From Employees
        /// </summary>			
        [TestMethod]
        public void SelectReportsToEmployeeFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees(1)/ReportsToEmployee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property EmployeeTerritories From Employees
        /// </summary>			
        [TestMethod]
        public void SelectEmployeeTerritoriesFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees(1)/EmployeeTerritories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Orders From Employees
        /// </summary>			
        [TestMethod]
        public void SelectOrdersFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees(1)/Orders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property ReportsToChildren From Employees
        /// </summary>			
        [TestMethod]
        public void SelectReportsToChildrenFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees(1)/ReportsToChildren";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Employee From EmployeeTerritories
        /// </summary>			
        [TestMethod]
        public void SelectEmployeeFromEmployeeTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories(EmployeeID=1,TerritoryID='06897')/Employee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Territory From EmployeeTerritories
        /// </summary>			
        [TestMethod]
        public void SelectTerritoryFromEmployeeTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories(EmployeeID=1,TerritoryID='06897')/Territory";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Order From OrderDetails
        /// </summary>			
        [TestMethod]
        public void SelectOrderFromOrderDetails()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails(OrderID=10248,ProductID=11)/Order";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Product From OrderDetails
        /// </summary>			
        [TestMethod]
        public void SelectProductFromOrderDetails()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails(OrderID=10248,ProductID=11)/Product";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Customer From Orders
        /// </summary>			
        [TestMethod]
        public void SelectCustomerFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders(10248)/Customer";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Employee From Orders
        /// </summary>			
        [TestMethod]
        public void SelectEmployeeFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders(10248)/Employee";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property OrderDetails From Orders
        /// </summary>			
        [TestMethod]
        public void SelectOrderDetailsFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders(10248)/OrderDetails";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property ShipViaShipper From Orders
        /// </summary>			
        [TestMethod]
        public void SelectShipViaShipperFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders(10248)/ShipViaShipper";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property OrderDetails From Products
        /// </summary>			
        [TestMethod]
        public void SelectOrderDetailsFromProducts()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Products(1)/OrderDetails";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Territories From Regions
        /// </summary>			
        [TestMethod]
        public void SelectTerritoriesFromRegions()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Regions(1)/Territories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property ShipViaOrders From Shippers
        /// </summary>			
        [TestMethod]
        public void SelectShipViaOrdersFromShippers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Shippers(1)/ShipViaOrders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Products From Suppliers
        /// </summary>			
        [TestMethod]
        public void SelectProductsFromSuppliers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Suppliers(1)/Products";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property Region From Territories
        /// </summary>			
        [TestMethod]
        public void SelectRegionFromTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories('01581')/Region";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Entry;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


        /// <summary>
        /// Select navigation property EmployeeTerritories From Territories
        /// </summary>			
        [TestMethod]
        public void SelectEmployeeTerritoriesFromTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories('01581')/EmployeeTerritories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
            }
            response.Close();
        }


    }
}
