// <auto-generated>
//     This code was generated by a tool from a template stored in:
//     '..\odatasdkcodesamples\ODataValidationToolkit\4.0\ODataTestGen\TestTemplates\Metadata\Metadata_Query All Entity Sets.tt'
//     Generation time: 12/08/2010 16:12:25
// </auto-generated>
	





namespace ODataGeneratedTests
{
    	
    using System;
    using System.Linq;
    using System.IO;
    using System.Data.Services;
    using System.Xml.Linq;
    using System.Net;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
    using System.Text;
    using AtomPayloadAnalyzer;
    using System.Xml;
    
    [TestClass]
    public class QueryAll_Metadata
    {
        		
        /// <summary>
        /// query all entires from entity set Categories
        /// </summary>
        [TestMethod]
        public void SelectAllFromCategories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Categories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Category\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"CategoryID\" /></Key><Property Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"CategoryName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Description\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Picture\" Type=\"Edm.Binary\" Nullable=\"true\" /><NavigationProperty Name=\"Products\" Relationship=\"IQTWcf.Category_Products\" FromRole=\"Category\" ToRole=\"Products\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 4;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set CustomerCustomerDemos
        /// </summary>
        [TestMethod]
        public void SelectAllFromCustomerCustomerDemos()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerCustomerDemos";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"CustomerCustomerDemo\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"CustomerID\" /><PropertyRef Name=\"CustomerTypeID\" /></Key><Property Name=\"CustomerID\" Type=\"Edm.String\" Nullable=\"false\" /><Property Name=\"CustomerTypeID\" Type=\"Edm.String\" Nullable=\"false\" /><NavigationProperty Name=\"Customer\" Relationship=\"IQTWcf.CustomerCustomerDemo_Customer\" FromRole=\"CustomerCustomerDemo\" ToRole=\"Customer\" /><NavigationProperty Name=\"CustomerDemographics\" Relationship=\"IQTWcf.CustomerCustomerDemo_CustomerDemographics\" FromRole=\"CustomerCustomerDemo\" ToRole=\"CustomerDemographics\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 2;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 3;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set CustomerDemographics
        /// </summary>
        [TestMethod]
        public void SelectAllFromCustomerDemographics()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "CustomerDemographics";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"CustomerDemographic\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"CustomerTypeID\" /></Key><Property Name=\"CustomerDesc\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"CustomerTypeID\" Type=\"Edm.String\" Nullable=\"false\" /><NavigationProperty Name=\"CustomerCustomerDemos\" Relationship=\"IQTWcf.CustomerDemographic_CustomerCustomerDemos\" FromRole=\"CustomerDemographic\" ToRole=\"CustomerCustomerDemos\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 2;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Customers
        /// </summary>
        [TestMethod]
        public void SelectAllFromCustomers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Customers";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Customer\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"CustomerID\" /></Key><Property Name=\"Address\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"City\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"CompanyName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ContactName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ContactTitle\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Country\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"CustomerID\" Type=\"Edm.String\" Nullable=\"false\" /><Property Name=\"Fax\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Phone\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"PostalCode\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Region\" Type=\"Edm.String\" Nullable=\"true\" /><NavigationProperty Name=\"CustomerCustomerDemos\" Relationship=\"IQTWcf.Customer_CustomerCustomerDemos\" FromRole=\"Customer\" ToRole=\"CustomerCustomerDemos\" /><NavigationProperty Name=\"Orders\" Relationship=\"IQTWcf.Customer_Orders\" FromRole=\"Customer\" ToRole=\"Orders\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 11;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 3;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Employees
        /// </summary>
        [TestMethod]
        public void SelectAllFromEmployees()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Employees";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Employee\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"EmployeeID\" /></Key><Property Name=\"Address\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"BirthDate\" Type=\"Edm.DateTime\" Nullable=\"true\" /><Property Name=\"City\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Country\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"EmployeeID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"Extension\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"FirstName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"HireDate\" Type=\"Edm.DateTime\" Nullable=\"true\" /><Property Name=\"HomePhone\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"LastName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Notes\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Photo\" Type=\"Edm.Binary\" Nullable=\"true\" /><Property Name=\"PhotoPath\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"PostalCode\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Region\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ReportsTo\" Type=\"Edm.Int32\" Nullable=\"true\" /><Property Name=\"Title\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"TitleOfCourtesy\" Type=\"Edm.String\" Nullable=\"true\" /><NavigationProperty Name=\"ReportsToEmployee\" Relationship=\"IQTWcf.Employee_ReportsToEmployee\" FromRole=\"Employee\" ToRole=\"ReportsToEmployee\" /><NavigationProperty Name=\"EmployeeTerritories\" Relationship=\"IQTWcf.Employee_EmployeeTerritories\" FromRole=\"Employee\" ToRole=\"EmployeeTerritories\" /><NavigationProperty Name=\"Orders\" Relationship=\"IQTWcf.Employee_Orders\" FromRole=\"Employee\" ToRole=\"Orders\" /><NavigationProperty Name=\"ReportsToChildren\" Relationship=\"IQTWcf.Employee_ReportsToChildren\" FromRole=\"Employee\" ToRole=\"ReportsToChildren\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 18;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 5;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set EmployeeTerritories
        /// </summary>
        [TestMethod]
        public void SelectAllFromEmployeeTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "EmployeeTerritories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"EmployeeTerritory\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"EmployeeID\" /><PropertyRef Name=\"TerritoryID\" /></Key><Property Name=\"EmployeeID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"TerritoryID\" Type=\"Edm.String\" Nullable=\"false\" /><NavigationProperty Name=\"Employee\" Relationship=\"IQTWcf.EmployeeTerritory_Employee\" FromRole=\"EmployeeTerritory\" ToRole=\"Employee\" /><NavigationProperty Name=\"Territory\" Relationship=\"IQTWcf.EmployeeTerritory_Territory\" FromRole=\"EmployeeTerritory\" ToRole=\"Territory\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 2;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 3;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set OrderDetails
        /// </summary>
        [TestMethod]
        public void SelectAllFromOrderDetails()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "OrderDetails";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"OrderDetail\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"OrderID\" /><PropertyRef Name=\"ProductID\" /></Key><Property Name=\"Discount\" Type=\"Edm.Single\" Nullable=\"false\" /><Property Name=\"OrderID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"ProductID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"Quantity\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"UnitPrice\" Type=\"Edm.Decimal\" Nullable=\"false\" /><NavigationProperty Name=\"Order\" Relationship=\"IQTWcf.OrderDetail_Order\" FromRole=\"OrderDetail\" ToRole=\"Order\" /><NavigationProperty Name=\"Product\" Relationship=\"IQTWcf.OrderDetail_Product\" FromRole=\"OrderDetail\" ToRole=\"Product\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 5;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 3;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Orders
        /// </summary>
        [TestMethod]
        public void SelectAllFromOrders()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Orders";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Order\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"OrderID\" /></Key><Property Name=\"CustomerID\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"EmployeeID\" Type=\"Edm.Int32\" Nullable=\"true\" /><Property Name=\"Freight\" Type=\"Edm.Decimal\" Nullable=\"true\" /><Property Name=\"OrderDate\" Type=\"Edm.DateTime\" Nullable=\"true\" /><Property Name=\"OrderID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"RequiredDate\" Type=\"Edm.DateTime\" Nullable=\"true\" /><Property Name=\"ShipAddress\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipCity\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipCountry\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShippedDate\" Type=\"Edm.DateTime\" Nullable=\"true\" /><Property Name=\"ShipPostalCode\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipRegion\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipVia\" Type=\"Edm.Int32\" Nullable=\"true\" /><NavigationProperty Name=\"Customer\" Relationship=\"IQTWcf.Order_Customer\" FromRole=\"Order\" ToRole=\"Customer\" /><NavigationProperty Name=\"Employee\" Relationship=\"IQTWcf.Order_Employee\" FromRole=\"Order\" ToRole=\"Employee\" /><NavigationProperty Name=\"OrderDetails\" Relationship=\"IQTWcf.Order_OrderDetails\" FromRole=\"Order\" ToRole=\"OrderDetails\" /><NavigationProperty Name=\"ShipViaShipper\" Relationship=\"IQTWcf.Order_ShipViaShipper\" FromRole=\"Order\" ToRole=\"ShipViaShipper\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 14;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 5;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Products
        /// </summary>
        [TestMethod]
        public void SelectAllFromProducts()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Products";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Product\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"ProductID\" /></Key><Property Name=\"ProductID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"ProductName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"SupplierID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"CategoryID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"QuantityPerUnit\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"UnitPrice\" Type=\"Edm.Decimal\" Nullable=\"false\" /><Property Name=\"UnitsInStock\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"UnitsOnOrder\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"ReorderLevel\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"Discontinued\" Type=\"Edm.Boolean\" Nullable=\"false\" /><NavigationProperty Name=\"OrderDetails\" Relationship=\"IQTWcf.Product_OrderDetails\" FromRole=\"Product\" ToRole=\"OrderDetails\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 10;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Regions
        /// </summary>
        [TestMethod]
        public void SelectAllFromRegions()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Regions";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Region\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"RegionID\" /></Key><Property Name=\"RegionDescription\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"RegionID\" Type=\"Edm.Int32\" Nullable=\"false\" /><NavigationProperty Name=\"Territories\" Relationship=\"IQTWcf.Region_Territories\" FromRole=\"Region\" ToRole=\"Territories\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 2;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Shippers
        /// </summary>
        [TestMethod]
        public void SelectAllFromShippers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Shippers";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Shipper\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"ShipperID\" /></Key><Property Name=\"CompanyName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Phone\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ShipperID\" Type=\"Edm.Int32\" Nullable=\"false\" /><NavigationProperty Name=\"ShipViaOrders\" Relationship=\"IQTWcf.Shipper_ShipViaOrders\" FromRole=\"Shipper\" ToRole=\"ShipViaOrders\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 3;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Suppliers
        /// </summary>
        [TestMethod]
        public void SelectAllFromSuppliers()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Suppliers";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Supplier\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"SupplierID\" /></Key><Property Name=\"SupplierID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"CompanyName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ContactName\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"ContactTitle\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Address\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"City\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Region\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"PostalCode\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Country\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Phone\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"Fax\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"HomePage\" Type=\"Edm.String\" Nullable=\"true\" /><NavigationProperty Name=\"Products\" Relationship=\"IQTWcf.Supplier_Products\" FromRole=\"Supplier\" ToRole=\"Products\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 12;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 2;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


        /// <summary>
        /// query all entires from entity set Territories
        /// </summary>
        [TestMethod]
        public void SelectAllFromTerritories()
        {
            string strQuery =  WcfTestUtil.OdataServiceRoot  + "Territories";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(strQuery);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            using(XmlReader xrResponse = XmlReader.Create(response.GetResponseStream()))
            {
                XElement payload = XElement.Load(xrResponse);
                UriResultType expectedType = UriResultType.Feed;
                UriResultType actualType = PayloadAnalyzer.getResultType(payload);
                Assert.AreEqual(expectedType, actualType);
                
                //--------------------The entityType defintion in the metadata----------------------
                
                string strMetadataEntityType = "<EntityType Name=\"Territory\" xmlns=\"http://schemas.microsoft.com/ado/2007/05/edm\"><Key><PropertyRef Name=\"TerritoryID\" /></Key><Property Name=\"RegionID\" Type=\"Edm.Int32\" Nullable=\"false\" /><Property Name=\"TerritoryDescription\" Type=\"Edm.String\" Nullable=\"true\" /><Property Name=\"TerritoryID\" Type=\"Edm.String\" Nullable=\"false\" /><NavigationProperty Name=\"Region\" Relationship=\"IQTWcf.Territory_Region\" FromRole=\"Territory\" ToRole=\"Region\" /><NavigationProperty Name=\"EmployeeTerritories\" Relationship=\"IQTWcf.Territory_EmployeeTerritories\" FromRole=\"Territory\" ToRole=\"EmployeeTerritories\" /></EntityType>";
                
                //-----------------------------End of Definition------------------------------------
                
                XElement MetadataEntityType = XElement.Parse(strMetadataEntityType);
                XElement feed = payload;
                XElement[] entries = feed.Elements().Where(c => c.Name.LocalName == "entry").ToArray();
                foreach (XElement entry in entries)
                {
                    XNamespace dNamespace = PayloadAnalyzer.DataNamespace;
                    XNamespace mNamespace = PayloadAnalyzer.ODataMetadataNamespace;
                    XNamespace defaultNamespace = PayloadAnalyzer.AtomNamespace;
                    XElement idElement = entry.Element(defaultNamespace + "id");
                    XElement authorElement = entry.Element(defaultNamespace + "author");
                    XElement categoryElement = entry.Element(defaultNamespace + "category");
                    XElement category = categoryElement;
                    XElement contentElement = entry.Element(defaultNamespace + "content");
                    XElement propsElement = contentElement.Element(mNamespace + "properties");
                    XElement[] properties = propsElement.Elements().ToArray();
                    
                    // Verify if the payload contains valid id information
                    Assert.IsNotNull(idElement, "ID element is null in atom:entry");
                    // Verify if the payload contains valid author information
                    Assert.IsNotNull(authorElement, "Author element is null in atom:entry");
                    // Verify if the payload contains valid category information
                    Assert.IsNotNull(categoryElement,"Category element is null in atom:entry");
                    // Verify if the payload contains valid content information
                    Assert.IsNotNull(contentElement,"Content element is null in atom:entry");
                    // Verify if the payload contains valid properties information
                    Assert.IsNotNull(propsElement,"Properties element is null in atom:entry");
                    
                    // verify properties
                    int expectedPropertyCount = 3;
                    Assert.AreEqual(expectedPropertyCount, properties.Length);
                    XElement[] MetadataProperties = MetadataEntityType.Elements().Where(c=>c.Name.LocalName == "Property").ToArray();
                    foreach (XElement property in properties)
                    {
                    	string propertyName = property.Name.LocalName;
                    	XElement MetadataProperty = MetadataProperties.First(c => c.Attribute("Name").Value == propertyName);
                    	Assert.AreNotEqual(null, MetadataProperty);
                    	if (property.Attribute(mNamespace + "type") == null || MetadataProperty == null)
                    	{
                    		Assert.AreEqual("Edm.String", MetadataProperty.Attribute("Type").Value);
                    		continue;
                    	}
                    	string propertyType = property.Attribute(mNamespace + "type").Value;
                    	string MetadataPropertyType = MetadataProperty.Attribute("Type").Value;
                    	Assert.AreEqual(MetadataPropertyType, propertyType);
                    }
                    // Verify number of navigation properties returned
                    XElement[] linkElements = entry.Elements().Where(c => c.Name.LocalName == "link").ToArray();
                    
                    int expectedNaviPropertyCount = 3;
                    Assert.AreEqual(expectedNaviPropertyCount, linkElements.Length);
                }
            }
            response.Close();
        }


    }
}
